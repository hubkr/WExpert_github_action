; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define MyAppName "W Expert"
#define MyAppVersion "0.11.1"
#define MyAppBuildNumber "25261"
#define MyAppPublisher "W.AI Co., Ltd."
#define MyAppURL "https://www.w-ai.ai/"
#define MyAppExeName "WExpert.exe"
#define MyAppId "{C2A00C77-DAE6-4BC5-82D3-E0435AEE6BE0}"

[Setup]
AppId={{#MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}.{#MyAppBuildNumber}
AppVerName={#MyAppName} {#MyAppVersion} (Build {#MyAppBuildNumber})
LicenseFile=Source\license.txt
UninstallDisplayName={#MyAppName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
DisableProgramGroupPage=yes
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=Output
OutputBaseFilename=WExpertSetup-{#MyAppVersion} (Build {#MyAppBuildNumber})
SetupIconFile=Source\WindowIcon.ico
SolidCompression=yes
WizardStyle=modern
; 모든 사용자 설치를 위해 관리자 권한으로 실행
;PrivilegesRequired=admin
; 모든 사용자  설치로 설치 진행
;DefaultDirName={commonpf}\{#MyAppName}
;PrivilegesRequired=admin
;PrivilegesRequiredOverridesAllowed=none

; 설치 프로그램과 언인스톨러 모두 자동 서명 활성화
SignedUninstaller=yes

; signtool.exe를 사용한 코드 서명 명령(컴파일러 프로그램 > Tools > Configure Sign Tools.. 에 설정 설정됨)
; 설정값 D:\Setup 생성\Build\signtool sign /fd SHA256 /a /tr http://timestamp.sectigo.com /td SHA256 $f
SignTool=WExpertSignTool $f

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "Source\WExpert\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "Source\WExpert\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Code]
const
  MyAppId = '{#MyAppId}';
  UninstallerRegPath = 'Software\Microsoft\Windows\CurrentVersion\Uninstall\' + MyAppId + '_is1';

// 동의 페이지 디폴트 값 ('I accept the agreement' 옵션을 기본 선택)
procedure CurPageChanged(CurPageID: Integer);
begin
  // "License Agreement" 페이지일 때
  if CurPageID = wpLicense then
  begin
    // 'I accept the agreement' 옵션을 기본 선택
    WizardForm.LicenseAcceptedRadio.Checked := True;
  end;
end;

// UninstallString 파싱 함수
procedure ParseUninstallString(UninstallString: String; var ExePath: String; var Params: String);
var
  p: Integer;
begin
  ExePath := '';
  Params := '';

  if (Length(UninstallString) > 0) and (UninstallString[1] = '"') then
  begin
    Delete(UninstallString, 1, 1);
    p := Pos('"', UninstallString);
    if p > 0 then
    begin
      ExePath := Copy(UninstallString, 1, p - 1);
      Delete(UninstallString, 1, p);
      Params := Trim(UninstallString);
    end;
  end
  else
  begin
    p := Pos(' ', UninstallString);
    if p > 0 then
    begin
      ExePath := Copy(UninstallString, 1, p - 1);
      Params := Trim(Copy(UninstallString, p + 1, Length(UninstallString)));
    end
    else
      ExePath := UninstallString;
  end;
end;

// 레지스트리에서 UninstallString 가져오기
function GetUninstallString(): String;
begin
  Result := '';
  if not RegQueryStringValue(HKLM, UninstallerRegPath, 'UninstallString', Result) then
    RegQueryStringValue(HKCU, UninstallerRegPath, 'UninstallString', Result);
end;

// 레지스트리에서 설치된 버전 가져오기
function GetInstalledVersion(): String;
begin
  if not RegQueryStringValue(HKLM, UninstallerRegPath, 'DisplayVersion', Result) then
    RegQueryStringValue(HKCU, UninstallerRegPath, 'DisplayVersion', Result);
end;

// PosEx 함수 추가
function PosEx(const SubStr, S: String; Offset: Integer): Integer;
var
  i, Len, LenSub: Integer;
begin
  Result := 0;
  Len := Length(S);
  LenSub := Length(SubStr);
  if (LenSub = 0) or (Len = 0) or (Offset > Len) then
    Exit;
  for i := Offset to Len - LenSub + 1 do
  begin
    if Copy(S, i, LenSub) = SubStr then
    begin
      Result := i;
      Exit;
    end;
  end;
end;

// SplitString 함수 추가
function SplitString(const S, Delimiter: String): TArrayOfString;
var
  P, LastP, Count: Integer;
begin
  Count := 0;
  P := Pos(Delimiter, S);
  LastP := 1;
  while P > 0 do
  begin
    SetArrayLength(Result, Count + 1);
    Result[Count] := Copy(S, LastP, P - LastP);
    Inc(Count);
    LastP := P + Length(Delimiter);
    P := PosEx(Delimiter, S, LastP);
  end;
  SetArrayLength(Result, Count + 1);
  Result[Count] := Copy(S, LastP, Length(S) - LastP + 1);
end;

// 버전 비교 함수 (1: 버전1 > 버전2, -1: 버전1 < 버전2, 0: 동일)
function CompareVersions(Version1, Version2: String): Integer;
var
  Parts1, Parts2: TArrayOfString;
  I, Num1, Num2: Integer;
begin
  Parts1 := SplitString(Version1, '.');
  Parts2 := SplitString(Version2, '.');

  for I := 0 to 3 do
  begin
    if I < GetArrayLength(Parts1) then
      Num1 := StrToIntDef(Parts1[I], 0)
    else
      Num1 := 0;

    if I < GetArrayLength(Parts2) then
      Num2 := StrToIntDef(Parts2[I], 0)
    else
      Num2 := 0;

    if Num1 > Num2 then
    begin
      Result := 1;
      Exit;
    end
    else if Num1 < Num2 then
    begin
      Result := -1;
      Exit;
    end;
  end;
  Result := 0;
end;

// 디지털 서명 검증 함수
function CheckSelfSignature(): Boolean;
var
  PSCommand: String;
  ResultCode: Integer;
begin
  PSCommand := 
    'powershell -Command "if ((Get-AuthenticodeSignature ''' + 
    ExpandConstant('{srcexe}') + 
    ''').Status -eq ''Valid'') { exit 0 } else { exit 1 }"';
  
  if Exec(PSCommand, '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    Result := (ResultCode = 0)
  else
    Result := False;
end;

// 설치 초기화 로직
// 최신 버전 설치됨 -	오류 메시지 후 설치 중단
// 구버전 설치됨 -	삭제 확인 후 진행
// 동일 버전 설치됨 -	Inno 기본 재설치 대화상자 표시 ([예/아니오] 선택)
function InitializeSetup(): Boolean;
var
  UninstallString, ExePath, Params, InstalledVersion, NewVersion: String;
  ResultCode, CompareResult, UserResponse: Integer;
begin

  // 서명 검증 우선 실행
  //if not CheckSelfSignature() then
  //begin
  //  MsgBox('이 설치 파일의 디지털 서명에 문제가 있습니다. 설치를 중단합니다.', mbCriticalError, MB_OK);
  //  Result := False;
  //  Exit;
  //end;
  
  UninstallString := GetUninstallString();
  InstalledVersion := GetInstalledVersion();

  if (UninstallString <> '') then
  begin
  
    // 버전 비교
    //CompareResult := CompareVersions(InstalledVersion, '{#MyAppVersion}.{#MyAppBuildNumber}');
    NewVersion := '{#MyAppVersion}.{#MyAppBuildNumber}';
    CompareResult := CompareVersions(InstalledVersion, NewVersion);
    
    case CompareResult of
      1:  // 설치된 버전이 더 최신
      begin
        MsgBox('A newer version (' + InstalledVersion + ') is already installed.' + #13#10 + 'Setup will now exit.', mbError, MB_OK);
        Result := False;
        Exit;
      end;
      -1: // 설치된 버전이 더 오래됨
      begin
        UserResponse := MsgBox('A previous version (' + InstalledVersion + ') is already installed.' + #13#10 + 'Do you want to uninstall it and continue?', mbConfirmation, MB_YESNO);
        if UserResponse = IDYES then
        begin
          ParseUninstallString(UninstallString, ExePath, Params);
          if not Exec(ExePath, '/SILENT /NORESTART', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
          begin
            MsgBox('Failed to uninstall the previous version. Setup will now exit.', mbError, MB_OK);
            Result := False;
            Exit;
          end;
        end
        else
        begin
          Result := False; // 설치 취소
          Exit;
        end;
      end;
      0:  // 동일 버전: Inno 기본 재설치 로직 사용
      begin
        Result := True; // 아무 작업도 하지 않고 Inno의 기본 동작 실행
        Exit;
      end;
    end;
  end;
  
  Result := True; // 설치 진행
end;

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
