name: Build WExpert Setup
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
    runs-on: windows-latest
    
    env:
      Solution_Name: WExpert.sln
      Test_Project_Path: WExpert.Tests.MSTest\WExpert.Tests.MSTest.csproj
      Publish_Project_Path: WExpert\WExpert.csproj
      Output_Directory: publish_output
    
    steps:   
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Restore solution packages
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}
    
    - name: Build project to generate .xbf
      run: |
        msbuild $env:Publish_Project_Path `
          /t:Build `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform=x64 `
          /p:GenerateXbfFiles=true `
          /p:XamlCompilation=true
    
    - name: Restore and build for publish
      run: |
        msbuild $env:Publish_Project_Path `
          "/t:Restore;Build" `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform=x64 `
          /p:RuntimeIdentifier=win-x64 `
          /p:SelfContained=true `
          /p:GenerateXbfFiles=true `
          /p:XamlCompilation=true
    
    - name: Publish self-contained app
      run: |
        msbuild $env:Publish_Project_Path `
          /t:Publish `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform=x64 `
          /p:RuntimeIdentifier=win-x64 `
          /p:SelfContained=true `
          /p:PublishDir=$env:Output_Directory `
          /p:GenerateXbfFiles=true `
          /p:XamlCompilation=true `
          /p:PublishReadyToRun=false `
          /p:PublishSingleFile=false
    
    - name: Remove unwanted language folders
      shell: pwsh
      run: |
        $outputPath = $env:Output_Directory
        if (Test-Path $outputPath) {
          Write-Host "Removing unwanted language resource folders..."
          
          $keepLanguages = @("en-US", "en-us")
          $allDirs = Get-ChildItem -Path $outputPath -Directory
          
          $languageFolders = @(
            "az-Latn-AZ", "bs-Latn-BA", "ca-Es-VALENCIA", "fil-PH", "kok-IN",
            "quz-PE", "sr-Cyrl-BA", "sr-Cyrl-RS", "sr-Latn-RS", "uz-Latn-UZ",
            "ar", "bg", "ca", "cs", "da", "de", "el", "es", "et", "eu", "fa", "fi",
            "fr", "gl", "he", "hi", "hr", "hu", "id", "it", "ja", "kk", "ko", "lt",
            "lv", "ms", "nb", "nl", "pl", "pt", "ro", "ru", "sk", "sl", "sv", "th",
            "tr", "uk", "vi", "zh", "ar-SA", "bg-BG", "ca-ES", "zh-CN", "zh-TW",
            "zh-Hans", "zh-Hant", "cs-CZ", "da-DK", "de-DE", "el-GR", "es-ES",
            "et-EE", "eu-ES", "fa-IR", "fi-FI", "fr-FR", "gl-ES", "he-IL", "hi-IN",
            "hr-HR", "hu-HU", "id-ID", "it-IT", "ja-JP", "ko-KR", "lt-LT", "lv-LV",
            "ms-MY", "nb-NO", "nl-NL", "pl-PL", "pt-PT", "pt-BR", "ro-RO", "ru-RU",
            "sk-SK", "sl-SI", "sv-SE", "th-TH", "tr-TR", "uk-UA", "vi-VN"
          )
          
          foreach ($dir in $allDirs) {
            $dirName = $dir.Name
            
            if ($languageFolders -contains $dirName -or 
                ($dirName -match "^[a-z]{2}$") -or 
                ($dirName -match "^[a-z]{2}-[A-Z]{2}$") -or
                ($dirName -match "^[a-z]{2}-[A-Za-z]{2,4}-[A-Z]{2}$")) {
              
              if ($keepLanguages -notcontains $dirName) {
                Write-Host "Removing language folder: $dirName"
                Remove-Item -Path $dir.FullName -Recurse -Force -ErrorAction SilentlyContinue
              }
            }
          }
          
          Write-Host "Language cleanup completed"
          Write-Host "Remaining directories:"
          Get-ChildItem -Path $outputPath -Directory | Select-Object Name
        }
    
    - name: List published files
      shell: pwsh
      run: |
        if (Test-Path $env:Output_Directory) {
          Write-Host "Published files:"
          Get-ChildItem -Path $env:Output_Directory -Recurse
        } else {
          Write-Host "Output directory not found"
          Get-ChildItem -Directory
        }
    
    - name: Upload setup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WExpert-Setup-${{ matrix.configuration }}
        path: ${{ env.Output_Directory }}
        if-no-files-found: warn
