name: Build WExpert Setup
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
    runs-on: windows-latest
    
    env:
      Solution_Name: WExpert.sln
      Test_Project_Path: WExpert.Tests.MSTest\WExpert.Tests.MSTest.csproj
      Publish_Project_Path: WExpert\WExpert.csproj
      Output_Directory: publish_output
    
    steps:   
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Restore solution packages
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}
    
    - name: Build project to generate .xbf
      run: msbuild $env:Publish_Project_Path /t:Build /p:Configuration=${{ matrix.configuration }} /p:Platform=x64
    
    - name: Publish self-contained app
      run: |
        dotnet publish $env:Publish_Project_Path `
          --configuration ${{ matrix.configuration }} `
          --runtime win-x64 `
          --self-contained true `
          --output $env:Output_Directory
    
    - name: Remove unwanted language folders
      shell: pwsh
      run: |
        $outputPath = $env:Output_Directory
        if (Test-Path $outputPath) {
          Write-Host "Removing unwanted language folders..."
          
          # 방법 1: 정규식 패턴으로 언어 폴더 찾기
          $languageFolders = Get-ChildItem -Path $outputPath -Directory | Where-Object { 
            ($_.Name -match '^[a-z]{2}
    
    - name: List published files
      shell: pwsh
      run: |
        if (Test-Path $env:Output_Directory) {
          Write-Host "Published files in $env:Output_Directory"
          Get-ChildItem -Path $env:Output_Directory -Recurse | Format-Table Name, Length, LastWriteTime -AutoSize
        } else {
          Write-Host "Output directory not found: $env:Output_Directory"
          Write-Host "Available directories:"
          Get-ChildItem -Directory | Format-Table Name -AutoSize
        }
    
    - name: Upload setup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WExpert-Setup-${{ matrix.configuration }}
        path: ${{ env.Output_Directory }}
        if-no-files-found: warn) -or 
            ($_.Name -match '^[a-z]{2}-[A-Z]{2}
    
    - name: List published files
      shell: pwsh
      run: |
        if (Test-Path $env:Output_Directory) {
          Write-Host "Published files in $env:Output_Directory"
          Get-ChildItem -Path $env:Output_Directory -Recurse | Format-Table Name, Length, LastWriteTime -AutoSize
        } else {
          Write-Host "Output directory not found: $env:Output_Directory"
          Write-Host "Available directories:"
          Get-ChildItem -Directory | Format-Table Name -AutoSize
        }
    
    - name: Upload setup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WExpert-Setup-${{ matrix.configuration }}
        path: ${{ env.Output_Directory }}
        if-no-files-found: warn) -or
            ($_.Name -match '^[a-z]{2}-[A-Za-z]{2,4}
    
    - name: List published files
      shell: pwsh
      run: |
        if (Test-Path $env:Output_Directory) {
          Write-Host "Published files in $env:Output_Directory"
          Get-ChildItem -Path $env:Output_Directory -Recurse | Format-Table Name, Length, LastWriteTime -AutoSize
        } else {
          Write-Host "Output directory not found: $env:Output_Directory"
          Write-Host "Available directories:"
          Get-ChildItem -Directory | Format-Table Name -AutoSize
        }
    
    - name: Upload setup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WExpert-Setup-${{ matrix.configuration }}
        path: ${{ env.Output_Directory }}
        if-no-files-found: warn) -and 
            ($_.Name -ne 'en-US')
          }
          
          # 방법 2: 일반적인 .NET 언어 코드 직접 지정
          $commonLanguages = @(
            'ar', 'bg', 'ca', 'cs', 'da', 'de', 'el', 'es', 'et', 'eu', 'fa', 'fi', 
            'fr', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt', 
            'lv', 'ms', 'nb', 'nl', 'pl', 'pt', 'ro', 'ru', 'sk', 'sl', 'sv', 'th', 
            'tr', 'uk', 'vi', 'zh', 'ar-SA', 'bg-BG', 'ca-ES', 'zh-CN', 'zh-TW', 
            'zh-Hans', 'zh-Hant', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'es-ES', 
            'et-EE', 'eu-ES', 'fa-IR', 'fi-FI', 'fr-FR', 'gl-ES', 'he-IL', 'hi-IN', 
            'hr-HR', 'hu-HU', 'id-ID', 'it-IT', 'ja-JP', 'ko-KR', 'lt-LT', 'lv-LV', 
            'ms-MY', 'nb-NO', 'nl-NL', 'pl-PL', 'pt-PT', 'pt-BR', 'ro-RO', 'ru-RU', 
            'sk-SK', 'sl-SI', 'sv-SE', 'th-TH', 'tr-TR', 'uk-UA', 'vi-VN', 'sr-Latn-RS'
          )
          
          # 패턴 매칭으로 찾은 폴더들 삭제
          foreach ($folder in $languageFolders) {
            Write-Host "Removing by pattern: $($folder.Name)"
            Remove-Item -Path $folder.FullName -Recurse -Force
          }
          
          # 일반적인 언어 코드로 추가 삭제
          foreach ($lang in $commonLanguages) {
            $langPath = Join-Path -Path $outputPath -ChildPath $lang
            if (Test-Path $langPath) {
              Write-Host "Removing by list: $lang"
              Remove-Item -Path $langPath -Recurse -Force
            }
          }
          
          Write-Host "Remaining folders after cleanup:"
          Get-ChildItem -Path $outputPath -Directory | Format-Table Name -AutoSize
        }
    
    - name: List published files
      shell: pwsh
      run: |
        if (Test-Path $env:Output_Directory) {
          Write-Host "Published files in $env:Output_Directory"
          Get-ChildItem -Path $env:Output_Directory -Recurse | Format-Table Name, Length, LastWriteTime -AutoSize
        } else {
          Write-Host "Output directory not found: $env:Output_Directory"
          Write-Host "Available directories:"
          Get-ChildItem -Directory | Format-Table Name -AutoSize
        }
    
    - name: Upload setup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WExpert-Setup-${{ matrix.configuration }}
        path: ${{ env.Output_Directory }}
        if-no-files-found: warn
